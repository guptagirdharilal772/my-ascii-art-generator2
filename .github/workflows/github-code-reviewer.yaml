name: Gemini AI Code Review & Merge Gate

on:
  push:
    branches:
      - main
      - master
      - 'feature/**'
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    #branches:
      #- main
      #- 'feature/**'

jobs:
  gemini_review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python & Install Gemini CLI
        run: |
          python3 -m pip install --upgrade pip
          pip install -U google-generativeai
          echo "‚úÖ Gemini CLI installed"

      - name: Authenticate Gemini CLI
        env:
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "export GOOGLE_API_KEY=${GOOGLE_API_KEY}" >> $GITHUB_ENV
          echo "üîê Gemini CLI authenticated"

      - name: Generate Git Diff
        id: diff
        run: |
          echo "üîç Generating diff..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.event.pull_request.base.ref }}
            git diff origin/${{ github.event.pull_request.base.ref }}...HEAD > diff.txt || true
          else
            git fetch origin main
            git diff origin/main...HEAD > diff.txt || true
          fi
          echo "üìÑ Diff saved to diff.txt (preview up to 200 lines):"
          head -n 200 diff.txt || echo "(no diff)"

      - name: Check for No Changes and Bypass
        id: bypass
        run: |
          # If diff.txt is empty or only whitespace, skip the review and exit successfully.
          if [ ! -s diff.txt ] || [ "$(wc -c < diff.txt | tr -d '[:space:]')" = "0" ]; then
            echo "No changes detected ‚Äî skipping Gemini review."
            echo "REVIEW_OUTPUT<<EOF" >> $GITHUB_ENV
            echo "No changes detected ‚Äî skipping Gemini review." >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            # If this is a pull request, post a short comment to indicate bypass.
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "Posting bypass comment to PR..."
              # Use sticky comment action to add/update a comment
              echo "bypass_comment=true" >> $GITHUB_ENV
            fi

            # Exit 0 so the job is considered successful and will not block merge.
            exit 0
          else
            echo "Changes detected, continuing with Gemini review."
            echo "bypass_comment=false" >> $GITHUB_ENV
          fi

      - name: Run Gemini Review
        id: gemini
        env:
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "üß† Running Gemini review..."
          DIFF_CONTENT=$(sed -n '1,20000p' diff.txt) || DIFF_CONTENT=""
          PROMPT="You are a world-class autonomous code reviewer. Analyze the following Git diff. Identify syntax errors, security vulnerabilities, and bad practices. Provide feedback in Markdown with severity indicators (üî¥ Critical, üü† High, üü° Medium, üü¢ Low). Return concise, actionable suggestions.\n\nGit Diff:\n$DIFF_CONTENT"

          # Send prompt to Gemini CLI
          gemini -p "$PROMPT" > review_output.txt || echo "‚ö†Ô∏è Gemini CLI failed to produce output"

          echo "REVIEW_OUTPUT<<EOF" >> $GITHUB_ENV
          cat review_output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Review to Pull Request
        if: ${{ github.event_name == 'pull_request' && env.bypass_comment == 'false' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "ü§ñ Gemini AI Code Review"
          message: |
            ## üîç Automated Gemini Review
            ${{ env.REVIEW_OUTPUT }}

      - name: Post Bypass Comment (No Changes)
        if: ${{ github.event_name == 'pull_request' && env.bypass_comment == 'true' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "ü§ñ Gemini AI Code Review"
          message: |
            No changes were detected in the PR compared to the base branch. The AI review was skipped and the check passed.

      - name: Check for Critical Issues (Merge Gate)
        if: ${{ env.bypass_comment == 'false' }}
        id: gate
        run: |
          echo "üîé Checking Gemini output for üî¥ Critical issues..."
          echo "${{ env.REVIEW_OUTPUT }}" > review.txt
          if grep -q "üî¥" review.txt; then
            echo "‚ùå Critical issues found. Blocking merge!"
            exit 1
          else
            echo "‚úÖ No critical issues detected."
          fi

      - name: Log Review Summary
        if: always()
        run: |
          echo "===== Gemini AI Review Summary ====="
          echo "${{ env.REVIEW_OUTPUT }}"

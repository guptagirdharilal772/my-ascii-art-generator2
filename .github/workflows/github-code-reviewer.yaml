name: Gemini AI Code Review & Merge Gate

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
      - 'feature/**'

jobs:
  gemini_review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python & Install Gemini CLI
        run: |
          python3 -m pip install --upgrade pip
          pip install -U google-generativeai
          echo "‚úÖ Gemini CLI installed"

      - name: Authenticate Gemini CLI
        env:
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "export GOOGLE_API_KEY=${GOOGLE_API_KEY}" >> $GITHUB_ENV
          echo "üîê Gemini CLI authenticated"

      - name: Generate Git Diff
        id: diff
        run: |
          echo "üîç Generating diff..."
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.event.pull_request.base.ref }}
            git diff origin/${{ github.event.pull_request.base.ref }}...HEAD > diff.txt
          else
            git fetch origin main
            git diff origin/main...HEAD > diff.txt
          fi

          echo "üìÑ Preview of diff:"
          head -n 30 diff.txt || echo "No diff found"

      - name: Run Gemini Review
        id: gemini
        env:
          GOOGLE_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          DIFF_CONTENT=$(cat diff.txt)
          
          PROMPT="You are a world-class autonomous code reviewer. Analyze the following Git diff. Identify **syntax errors**, **security vulnerabilities**, and **bad practices**.
          Provide feedback in Markdown with severity indicators:
          üî¥ Critical ‚Äî must fix before merge  
          üü† High ‚Äî fix soon  
          üü° Medium ‚Äî optional improvements  
          üü¢ Low ‚Äî minor or stylistic suggestions  
          Respond clearly and concisely.

          Git Diff:
          $DIFF_CONTENT"

          echo "üß† Sending diff to Gemini for review..."
          gemini -p "$PROMPT" > review_output.txt || echo "‚ö†Ô∏è Gemini failed"

          echo "‚úÖ Review complete"
          echo "REVIEW_OUTPUT<<EOF" >> $GITHUB_ENV
          cat review_output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Review to Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "ü§ñ Gemini AI Code Review"
          message: |
            ## üîç Automated Gemini Review
            ${{ env.REVIEW_OUTPUT }}

      - name: Check for Critical Issues (Merge Gate)
        id: gate
        run: |
          echo "üîé Checking Gemini output for üî¥ Critical issues..."
          echo "${{ env.REVIEW_OUTPUT }}" > review.txt
          if grep -q "üî¥" review.txt; then
            echo "‚ùå Critical issues found. Blocking merge!"
            echo "critical_found=true" >> $GITHUB_ENV
            exit 1
          else
            echo "‚úÖ No critical issues detected."
            echo "critical_found=false" >> $GITHUB_ENV
          fi

      - name: Log Review Summary
        if: always()
        run: |
          echo "===== Gemini AI Review Summary ====="
          echo "${{ env.REVIEW_OUTPUT }}"
          echo "Critical found: ${{ env.critical_found }}"
